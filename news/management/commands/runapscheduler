import logging
 
from django.conf import settings
 
from apscheduler.schedulers.blocking import BlockingScheduler
from apscheduler.triggers.cron import CronTrigger
from django.core.management.base import BaseCommand
from django_apscheduler.jobstores import DjangoJobStore
from django_apscheduler.models import DjangoJobExecution

from django.core.mail import EmailMultiAlternatives
#from celery import shared_task
import time
from django.template.loader import render_to_string
from django.contrib.sites.models import Site  # Site.objects.get_current().domain

from datetime import datetime, timedelta

from news.models import *


from django.core.mail import send_mail 
 
logger = logging.getLogger(__name__)
 
 
# наша задача по выводу текста на экран
# post_id, user_id
def my_job():
    #  Your job processing logic here... 
   # задача выслать электронное письмо в html формате при создании новости
    # определить время неделю
    week_back = datetime.today() - timedelta(days=7)
    cats = Category.objects.all()  # берем все категории
    domain = Site.objects.get_current().domain  # для формирования ссылки
    # пройтись по всем категориям, подписанным пользователям сформировать и выслать все новости за неделю
    for c in cats:  # цикл по всем категориям
        users = c.subscribers.all()  # бежим по связям, пользователей, которые подписаны на категории новостей, собираем этих пользователей
        posts = Post.objects.filter(date_create__gte=week_back,
                                    categories=c)  # фильтрация постов неделя назад и по выбранной категории
        if posts.count() > 0:  # если были публикации
            for u1 in users:  # бежим по выбранным пользователям
                p = c.get_absolute_url()  # формирование ссылки
                html_content = render_to_string( # формирование тела письма в html формате
                    'email/post_week.html',
                    {
                        'username': u1.username,  # получение имени пользователя
                        'cat_name': c.name,
                        'cat_url': f'http://{domain}{p}',
                        'posts': posts,
                    }
                )
                msg = EmailMultiAlternatives(
                    subject=f'Последние публикации-{c.name}',
                    body=f'Рассылка последних публикаций из категории "{c.name}".',
                    from_email=settings.DEFAULT_FROM_EMAIL,
                    to=[u1.email],  # это то же, что и recipients_list
                )
                msg.attach_alternative(html_content, "text/html")  # добавляем html
                msg.send()  # отсылаем
 
 
# функция, которая будет удалять неактуальные задачи
def delete_old_job_executions(max_age=604_800):
    """This job deletes all apscheduler job executions older than `max_age` from the database."""
    DjangoJobExecution.objects.delete_old_job_executions(max_age)
 
 
class Command(BaseCommand):
    help = "Runs apscheduler."
 
    def handle(self, *args, **options):
        scheduler = BlockingScheduler(timezone=settings.TIME_ZONE)
        scheduler.add_jobstore(DjangoJobStore(), "default")
        
        # добавляем работу нашему задачнику
        scheduler.add_job(
            my_job,
            trigger=CronTrigger(second="*/10"),  # То же, что и интервал, но задача тригера таким образом более понятна django
            id="my_job",  # уникальный айди
            max_instances=1,
            replace_existing=True,
        )
        logger.info("Added job 'my_job'.")
 
        scheduler.add_job(
            delete_old_job_executions,
            trigger=CronTrigger(
                day_of_week="mon", hour="00", minute="00"
            ),  # Каждую неделю будут удаляться старые задачи, которые либо не удалось выполнить, либо уже выполнять не надо.
            id="delete_old_job_executions",
            max_instances=1,
            replace_existing=True,
        )
        logger.info(
            "Added weekly job: 'delete_old_job_executions'."
        )
 
        try:
            logger.info("Starting scheduler...")
            scheduler.start()
        except KeyboardInterrupt:
            logger.info("Stopping scheduler...")
            scheduler.shutdown()
            logger.info("Scheduler shut down successfully!")